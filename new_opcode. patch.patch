From 9787d64404a96ba5163120dfaa35cb22022e206d Mon Sep 17 00:00:00 2001
From: 6ejibiu <akimovpnz@live.com>
Date: Mon, 16 Mar 2020 00:05:11 +0300
Subject: [PATCH] add otus opcode

---
 Include/opcode.h        |  1 +
 Lib/opcode.py           |  1 +
 Python/ceval.c          | 17 +++++++++++++++++
 Python/opcode_targets.h |  2 +-
 Python/peephole.c       |  9 +++++++++
 5 files changed, 29 insertions(+), 1 deletion(-)

diff --git a/Include/opcode.h b/Include/opcode.h
index 9ed548729e..2de709d049 100644
--- a/Include/opcode.h
+++ b/Include/opcode.h
@@ -158,6 +158,7 @@ extern "C" {

 #define SET_ADD         146
 #define MAP_ADD         147
+#define LOAD_OTUS       150


 enum cmp_op {PyCmp_LT=Py_LT, PyCmp_LE=Py_LE, PyCmp_EQ=Py_EQ, PyCmp_NE=Py_NE, PyCmp_GT=Py_GT, PyCmp_GE=Py_GE,
diff --git a/Lib/opcode.py b/Lib/opcode.py
index e403365b6a..166373137c 100644
--- a/Lib/opcode.py
+++ b/Lib/opcode.py
@@ -188,5 +188,6 @@ def_op('EXTENDED_ARG', 145)
 EXTENDED_ARG = 145
 def_op('SET_ADD', 146)
 def_op('MAP_ADD', 147)
+def_op('FAST_OTUS', 150)

 del def_op, name_op, jrel_op, jabs_op
diff --git a/Python/ceval.c b/Python/ceval.c
index e1140a8e40..ce2418c61d 100644
--- a/Python/ceval.c
+++ b/Python/ceval.c
@@ -1243,7 +1243,24 @@ PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)
             PUSH(x);
             FAST_DISPATCH();
         }
+        TARGET(LOAD_OTUS)
+        {
+            x = GETLOCAL(0);
+            if (x != NULL) {
+                Py_INCREF(x);
+                PUSH(x);
+                x = GETITEM(consts, oparg);
+                // LOAD_CONST
+                Py_INCREF(x);
+                PUSH(x);
+                FAST_DISPATCH();

+            }
+            format_exc_check_arg(PyExc_UnboundLocalError,
+                UNBOUNDLOCAL_ERROR_MSG,
+                PyTuple_GetItem(co->co_varnames, oparg));
+            break;
+        }
         PREDICTED_WITH_ARG(STORE_FAST);
         TARGET(STORE_FAST)
         {
diff --git a/Python/opcode_targets.h b/Python/opcode_targets.h
index 95eb127a15..20dde517c4 100644
--- a/Python/opcode_targets.h
+++ b/Python/opcode_targets.h
@@ -149,7 +149,7 @@ static void *opcode_targets[256] = {
     &&TARGET_MAP_ADD,
     &&_unknown_opcode,
     &&_unknown_opcode,
-    &&_unknown_opcode,
+    &&TARGET_LOAD_OTUS,
     &&_unknown_opcode,
     &&_unknown_opcode,
     &&_unknown_opcode,
diff --git a/Python/peephole.c b/Python/peephole.c
index 11f6f8861c..e641ce8f72 100644
--- a/Python/peephole.c
+++ b/Python/peephole.c
@@ -583,6 +583,15 @@ PyCode_Optimize(PyObject *code, PyObject* consts, PyObject *names,

                 /* Replace RETURN LOAD_CONST None RETURN with just RETURN */
                 /* Remove unreachable JUMPs after RETURN */
+            case LOAD_FAST:
+                 j = GETARG(codestr, i);
+                 int nextop = i + 3;
+                 if (codestr[nextop] == LOAD_CONST && j == 0) {
+                    codestr[nextop] = LOAD_OTUS;
+                    memset(codestr+i, NOP, 3);
+                    break;
+               }
+                break;
             case RETURN_VALUE:
                 if (i+4 >= codelen)
                     continue;
--
2.22.0.windows.1

